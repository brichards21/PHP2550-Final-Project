organism_group == "Salmonella enterica")
cols <- c("organism_group", "isolation_type",
"snp_cluster", "amr_genotypes",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
cols <- c("organism_group", "isolation_type",
"snp_cluster",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
any(is.na(tetra_test$snp_cluster))
length(unique(tetra_test$snp_cluster))
tetra_test <- isolates_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, isolate, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
filter(!is.na(tetracycline),
organism_group == "Salmonella enterica")
cols <- c("organism_group", "isolation_type",
"snp_cluster",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
cols <- c("organism_group", "isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
rand_forest_test
amelia(tetra_test, m=1, parallel = "multicore",noms=cols)
install.packages("Amelia")
library(Amelia)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols)
tetra_test <- isolates_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, isolate, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
filter(!is.na(tetracycline),
organism_group == "Salmonella enterica") %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols)
tetra_test
str(tetra_test)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test <- isolates_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, isolate, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
filter(!is.na(tetracycline),
organism_group == "Salmonella enterica") %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols)
sapply(lapply(tetra_test, unique), length)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols)
tetra_test <- isolates_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
filter(!is.na(tetracycline),
organism_group == "Salmonella enterica") %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols,
idvars = "isolate")
tetra_test
tetra_test <- isolates_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
filter(
organism_group == "Salmonella enterica") %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols,
idvars = "isolate")
amelia(na.omit(tetra_test), m=1, parallel = "multicore",noms=cols,
idvars = "isolate")
amelia(tetra_test, m=1, parallel = "multicore",noms=cols,
idvars = "isolate")
levels(tetra_test)
sapply(lapply(tetra_test, unique), length)
tetra_test <- isolates_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
filter(
organism_group == "Salmonella enterica") %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
"tetracycline")
tetra_test[cols] <- lapply(tetra_test[cols], factor)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols,
idvars = "isolate")
str_split(salmonella_df$amr_genotypes, ",")
unlist(str_split(salmonella_df$amr_genotypes, ","))
genes_salm <- unlist(str_split(salmonella_df$amr_genotypes, ","))
aort(table(genes_salm), decreasing = T)
sort(table(genes_salm), decreasing = T)
sort(prop.table(table(genes_salm)), decreasing = T)
ecoli_df <- isolates_df %>%
filter(organism_group == "E.coli and Shigella")
campy_df <- isolates_df %>%
filter(organism_group == "Campylobacter jejuni")
genes_ecoli <- unlist(str_split(ecoli_df$amr_genotypes, ","))
genes_campy <- unlist(str_split(campy_df$amr_genotypes, ","))
sort(prop.table(table(genes_ecoli)), decreasing = T)
as.data.frame(sort(prop.table(table(genes_salm)), decreasing = T))
as.data.frame(sort(prop.table(table(genes_salm)), decreasing = T)) %>%
filter(Freq >= 0.01)
as.data.frame(sort(prop.table(table(genes_salm)), decreasing = T)) %>%
filter(Freq >= 0.02)
as.data.frame(sort(prop.table(table(genes_ecoli)), decreasing = T)) %>%
filter(Freq >= 0.02)
as.data.frame(sort(prop.table(table(genes_ecoli)), decreasing = T)) %>%
filter(Freq >= 0.03)
as.data.frame(sort(prop.table(table(genes_campy)), decreasing = T)) %>%
filter(Freq >= 0.03)
as.data.frame(sort(prop.table(table(genes_salm)), decreasing = T)) %>%
filter(Freq >= 0.02)
common_genes_salm <- as.data.frame(sort(prop.table(table(genes_salm)), decreasing = T)) %>%
filter(Freq >= 0.02)
common_genes_ecoli <- as.data.frame(sort(prop.table(table(genes_ecoli)), decreasing = T)) %>%
filter(Freq >= 0.03)
common_genes_campy <- as.data.frame(sort(prop.table(table(genes_campy)), decreasing = T)) %>%
filter(Freq >= 0.03)
paste0(common_genes_salm$genes_salm[1])
salmonella_df$paste0(common_genes_salm$genes_salm[1]) <- NA
salmonella_df$as.character(common_genes_salm$genes_salm[1]) <- NA
common_genes_salm$genes_salm[1]
as.character(common_genes_salm$genes_salm[1])
salmonella_df$as.character(common_genes_salm$genes_salm[1]) <- NA
salmonella_df$as.character(common_genes_salm$genes_salm[1])
salmonella_df[paste0(common_genes_salm$genes_salm, '_drug')] <- do.call(cbind, 0)
salmonella_df[paste0(common_genes_salm$genes_salm, '_drug')] <- do.call(cbind, as.list(0))
salmonella_df
View(salmonella_df)
common_genes_salm$genes_salm
salmonella_df[, c("amr_genotypes", common_genes_salm$genes_salm)]
common_genes_salm$genes_salm
c("amr_genotypes", common_genes_salm$genes_salm)
c(common_genes_salm$genes_salm)
c(as.vector(common_genes_salm$genes_salm))
salmonella_df[, c("amr_genotypes", as.vector(common_genes_salm$genes_salm))]
c("amr_genotypes", as.vector(common_genes_salm$genes_salm))
salmonella_df[, c( as.vector(common_genes_salm$genes_salm))]
salmonella_df[, common_genes_salm$genes_salm]
salmonella_df[, common_genes_salm$genes_salm]
salmonella_df[, as.vector(common_genes_salm$genes_salm)]
colnames(salmonella_df)
colnames(salmonella_df)
salmonella_df[, c(12, 26:37)]
anti_salm_df <- salmonella_df[, c(12, 26:37)]
anti_salm_df
t <- colnames(anti_salm_df)[2]
salmonella_df$t
salmonella_df[, t]
grepl(t, anti_salm_df[1, ]$amr_genotypes)
t
anti_salm_df[1, ]$amr_genotypes
t
# top susceptibility # top resistance # unique antibiotics used in model
# rownames - Salmonella enterica, E.coli and Shigella, Campylobacter jejuni
salmonella_df <- isolates_df %>%
filter(organism_group == "Salmonella enterica")
# 8672 records
ecoli_df <- isolates_df %>%
filter(organism_group == "E.coli and Shigella")
campy_df <- isolates_df %>%
filter(organism_group == "Campylobacter jejuni")
ecoli_campy_df <- isolates_df %>%
filter(organism_group != "Salmonella enterica")
# 7377  records
genes_salm <- unlist(str_split(salmonella_df$amr_genotypes, ","))
genes_ecoli <- unlist(str_split(ecoli_df$amr_genotypes, ","))
genes_campy <- unlist(str_split(campy_df$amr_genotypes, ","))
common_genes_salm <- as.data.frame(sort(prop.table(table(genes_salm)), decreasing = T)) %>%
filter(Freq >= 0.02)
common_genes_ecoli <- as.data.frame(sort(prop.table(table(genes_ecoli)), decreasing = T)) %>%
filter(Freq >= 0.03)
common_genes_campy <- as.data.frame(sort(prop.table(table(genes_campy)), decreasing = T)) %>%
filter(Freq >= 0.03)
salmonella_df[paste0(common_genes_salm$genes_salm)] <- do.call(cbind, as.list(0))
anti_salm_df <- salmonella_df[, c(12, 26:37)]
View(anti_salm_df)
t <- colnames(anti_salm_df)[2]
grepl(t, anti_salm_df[1, ]$amr_genotypes)
for (i in 2:ncol(anti_salm_df)) {
drug <- colnames(anti_salm_df)[i]
for (j in 1:nrow(anti_salm_df)) {
salmonella_df[j, drug] <- ifelse(grepl(drug, anti_salm_df[j, ]$amr_genotypes), 1, 0)
}
}
unique(c(common_genes_ecoli$genes_ecoli,
common_genes_campy$genes_campy))
common_genes_salm$genes_salm
genes_ecoli_campy <- unique(c(common_genes_ecoli$genes_ecoli,
common_genes_campy$genes_campy))
genes_ecoli_campy <- unique(c(common_genes_ecoli$genes_ecoli,
common_genes_campy$genes_campy))
ecoli_campy_df[paste0(genes_ecoli_campy)] <- do.call(cbind, as.list(0))
View(ecoli_campy_df)
genes_ecoli_campy <- unique(c(common_genes_ecoli$genes_ecoli,
common_genes_campy$genes_campy))
ecoli_campy_df[paste0(genes_ecoli_campy)] <- do.call(cbind, as.list(0))
anti_ecoli_campy_df <- ecoli_campy_df[, c(12, 26:38)]
for (i in 2:ncol(anti_ecoli_campy_df)) {
drug <- colnames(anti_ecoli_campy_df)[i]
for (j in 1:nrow(anti_ecoli_campy_df)) {
ecoli_campy_df[j, drug] <- ifelse(grepl(drug, anti_ecoli_campy_df[j, ]$amr_genotypes), 1, 0)
}
}
View(salmonella_df)
genes_ecoli_campy
common_genes_ecoli <- as.data.frame(sort(prop.table(table(genes_ecoli)), decreasing = T)) %>%
filter(Freq >= 0.03)
common_genes_ecoli
genes_ecoli_campy <- unique(c(common_genes_ecoli$genes_ecoli,
common_genes_campy$genes_campy))
ecoli_campy_df[paste0(genes_ecoli_campy)] <- do.call(cbind, as.list(0))
anti_ecoli_campy_df <- ecoli_campy_df[, c(12, 26:38)]
for (i in 2:ncol(anti_ecoli_campy_df)) {
drug <- colnames(anti_ecoli_campy_df)[i]
for (j in 1:nrow(anti_ecoli_campy_df)) {
ecoli_campy_df[j, drug] <- ifelse(grepl(drug, anti_ecoli_campy_df[j, ]$amr_genotypes), 1, 0)
}
}
colSums(ecoli_campy_df[, 26:38])
colSums(salmonella_df[, 26:37])
salmonella_df %>%
filter(grepl(aph(3'')-Ib=COMPLETE, amr_genotypes))
salmonella_df %>%
filter(grepl("aph(3'')-Ib=COMPLETE", amr_genotypes))
common_genes_salm
genes_salm
salmonella_df %>%
filter(grepl("aph(3'')-Ib=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(grepl("mdsA=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(str_detect(amr_genotypes, "mdsA=COMPLETE"))
salmonella_df %>%
filter(str_detect(amr_genotypes, "aph(3'')-Ib=COMPLETE"))
salmonella_df %>%
filter(str_detect(amr_genotypes, "aph(3"))
salmonella_df %>%
filter(str_detect(amr_genotypes, "aph(3"))
salmonella_df %>%
filter(grepl("aph(3'')-Ib=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(grepl("aph(3'", amr_genotypes))
salmonella_df %>%
filter(grepl("aph", amr_genotypes))
genes_salm
salmonella_df %>%
filter(grepl("aph\(3\'\'\)-Ib=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(grepl("aph\\(3''\\)-Ib=COMPLETE", amr_genotypes))
anti_salm_df
colnames(anti_salm_df)
str_replace(colnames(anti_salm_df), "(", "\\(")
str_replace(colnames(anti_salm_df), "\\(", "\\(")
anti_salm_df[-c(4, 5, 6, 7)]
colnames(anti_salm_df[-c(4, 5, 6, 7)])
c(colnames(anti_salm_df[-c(4, 5, 6, 7)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(B\\)=COMPLETE")
salmonella_df[paste0(common_genes_salm$genes_salm)] <- do.call(cbind, as.list(0))
anti_salm_df <- salmonella_df[, c(12, 26:37)]
for (i in 2:ncol(anti_salm_df)) {
drug_test <- c(colnames(anti_salm_df[-c(4, 5, 6, 7)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(B\\)=COMPLETE")
drug <- drug_test[i]
for (j in 1:nrow(anti_salm_df)) {
salmonella_df[j, drug] <- ifelse(grepl(drug, anti_salm_df[j, ]$amr_genotypes), 1, 0)
}
}
colnames(anti_ecoli_campy_df)
genes_ecoli_campy <- unique(c(common_genes_ecoli$genes_ecoli,
common_genes_campy$genes_campy))
ecoli_campy_df[paste0(genes_ecoli_campy)] <- do.call(cbind, as.list(0))
anti_ecoli_campy_df <- ecoli_campy_df[, c(12, 26:38)]
for (i in 2:ncol(anti_ecoli_campy_df)) {
drug_test <- c(colnames(anti_ecoli_campy_df[-c(5, 6, 8, 9, 13)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(O\\)=COMPLETE",
"aph\\(3'\\)-IIIa=COMPLETE")
drug <- drug_test[i]
for (j in 1:nrow(anti_ecoli_campy_df)) {
ecoli_campy_df[j, drug] <- ifelse(grepl(drug, anti_ecoli_campy_df[j, ]$amr_genotypes), 1, 0)
}
}
colSums(ecoli_campy_df[, 26:38])
colSums(salmonella_df[, 26:37])
salmonella_df[paste0(common_genes_salm$genes_salm)] <- do.call(cbind, as.list(0))
anti_salm_df <- salmonella_df[, c(12, 26:37)]
for (i in 2:ncol(anti_salm_df)) {
drug_test <- c(colnames(anti_salm_df[-c(4, 5, 6, 7)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(B\\)=COMPLETE")
drug <- drug_test[i]
for (j in 1:nrow(anti_salm_df)) {
salmonella_df[j, drug] <- ifelse(grepl(drug, anti_salm_df[j, ]$amr_genotypes), 1, 0)
}
}
salmonella_df <- salmonella_df[, -c(28:31)]
colSums(salmonella_df[, 26:37])
ecoli_campy_df <- ecoli_campy_df[, -c(29:30, 32:33, 37)]
colSums(ecoli_campy_df[, 26:38])
apply(ecoli_campy_df, 2, function(x) sum(is.na(x))/nrow(ecoli_campy_df))
tetra_test <- salmonella_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
select(-organism_group)
colnames(tetra_test)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
colnames(tetra_test)[13:25])
cols
tetra_test[cols] <- lapply(tetra_test[cols], factor)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols,
idvars = "isolate")
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
tetra_test
tetra_test <- salmonella_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, isolate, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
colnames(tetra_test)[13:25])
tetra_test[cols] <- lapply(tetra_test[cols], factor)
colnames(tetra_test)
tetra_test <- salmonella_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, isolate, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
colnames(tetra_test)[12:24])
tetra_test[cols] <- lapply(tetra_test[cols], factor)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
tetra_test
View(tetra_test)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
tetra_test %>%
clean_names()
library(janitor)
tetra_test %>%
clean_names()
# clean variable names
tetra_test <- tetra_test %>%
clean_names()
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
rand_forest_test
p1 <- predict(rand_forest_test, tetra_test)
confusionMatrix(p1, tetra_test$tetracycline)
library(caret)
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(caret)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(caret)
remove.packages('rlang')
library(caret)
library(caret)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(caret)
library(ggplot2)
library(rlang)
install.packages("rlang")
library(caret)
library(ggplot2)
library(rlang)
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
updateR()
library(readr)
library(rlang)
install.packages("rlang")
library(rlang)
install.packages("dplyr")
library(readr)
library(dplyr)
rlang
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
