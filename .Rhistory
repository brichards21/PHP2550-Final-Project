drug <- colnames(anti_ecoli_campy_df)[i]
for (j in 1:nrow(anti_ecoli_campy_df)) {
ecoli_campy_df[j, drug] <- ifelse(grepl(drug, anti_ecoli_campy_df[j, ]$amr_genotypes), 1, 0)
}
}
colSums(ecoli_campy_df[, 26:38])
colSums(salmonella_df[, 26:37])
salmonella_df %>%
filter(grepl(aph(3'')-Ib=COMPLETE, amr_genotypes))
salmonella_df %>%
filter(grepl("aph(3'')-Ib=COMPLETE", amr_genotypes))
common_genes_salm
genes_salm
salmonella_df %>%
filter(grepl("aph(3'')-Ib=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(grepl("mdsA=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(str_detect(amr_genotypes, "mdsA=COMPLETE"))
salmonella_df %>%
filter(str_detect(amr_genotypes, "aph(3'')-Ib=COMPLETE"))
salmonella_df %>%
filter(str_detect(amr_genotypes, "aph(3"))
salmonella_df %>%
filter(str_detect(amr_genotypes, "aph(3"))
salmonella_df %>%
filter(grepl("aph(3'')-Ib=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(grepl("aph(3'", amr_genotypes))
salmonella_df %>%
filter(grepl("aph", amr_genotypes))
genes_salm
salmonella_df %>%
filter(grepl("aph\(3\'\'\)-Ib=COMPLETE", amr_genotypes))
salmonella_df %>%
filter(grepl("aph\\(3''\\)-Ib=COMPLETE", amr_genotypes))
anti_salm_df
colnames(anti_salm_df)
str_replace(colnames(anti_salm_df), "(", "\\(")
str_replace(colnames(anti_salm_df), "\\(", "\\(")
anti_salm_df[-c(4, 5, 6, 7)]
colnames(anti_salm_df[-c(4, 5, 6, 7)])
c(colnames(anti_salm_df[-c(4, 5, 6, 7)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(B\\)=COMPLETE")
salmonella_df[paste0(common_genes_salm$genes_salm)] <- do.call(cbind, as.list(0))
anti_salm_df <- salmonella_df[, c(12, 26:37)]
for (i in 2:ncol(anti_salm_df)) {
drug_test <- c(colnames(anti_salm_df[-c(4, 5, 6, 7)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(B\\)=COMPLETE")
drug <- drug_test[i]
for (j in 1:nrow(anti_salm_df)) {
salmonella_df[j, drug] <- ifelse(grepl(drug, anti_salm_df[j, ]$amr_genotypes), 1, 0)
}
}
colnames(anti_ecoli_campy_df)
genes_ecoli_campy <- unique(c(common_genes_ecoli$genes_ecoli,
common_genes_campy$genes_campy))
ecoli_campy_df[paste0(genes_ecoli_campy)] <- do.call(cbind, as.list(0))
anti_ecoli_campy_df <- ecoli_campy_df[, c(12, 26:38)]
for (i in 2:ncol(anti_ecoli_campy_df)) {
drug_test <- c(colnames(anti_ecoli_campy_df[-c(5, 6, 8, 9, 13)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(O\\)=COMPLETE",
"aph\\(3'\\)-IIIa=COMPLETE")
drug <- drug_test[i]
for (j in 1:nrow(anti_ecoli_campy_df)) {
ecoli_campy_df[j, drug] <- ifelse(grepl(drug, anti_ecoli_campy_df[j, ]$amr_genotypes), 1, 0)
}
}
colSums(ecoli_campy_df[, 26:38])
colSums(salmonella_df[, 26:37])
salmonella_df[paste0(common_genes_salm$genes_salm)] <- do.call(cbind, as.list(0))
anti_salm_df <- salmonella_df[, c(12, 26:37)]
for (i in 2:ncol(anti_salm_df)) {
drug_test <- c(colnames(anti_salm_df[-c(4, 5, 6, 7)]),
"tet\\(A\\)=COMPLETE",
"aph\\(3''\\)-Ib=COMPLETE",
"aph\\(6\\)-Id=COMPLETE",
"tet\\(B\\)=COMPLETE")
drug <- drug_test[i]
for (j in 1:nrow(anti_salm_df)) {
salmonella_df[j, drug] <- ifelse(grepl(drug, anti_salm_df[j, ]$amr_genotypes), 1, 0)
}
}
salmonella_df <- salmonella_df[, -c(28:31)]
colSums(salmonella_df[, 26:37])
ecoli_campy_df <- ecoli_campy_df[, -c(29:30, 32:33, 37)]
colSums(ecoli_campy_df[, 26:38])
apply(ecoli_campy_df, 2, function(x) sum(is.na(x))/nrow(ecoli_campy_df))
tetra_test <- salmonella_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
select(-organism_group)
colnames(tetra_test)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
colnames(tetra_test)[13:25])
cols
tetra_test[cols] <- lapply(tetra_test[cols], factor)
amelia(tetra_test, m=1, parallel = "multicore",noms=cols,
idvars = "isolate")
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
tetra_test
tetra_test <- salmonella_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, isolate, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
colnames(tetra_test)[13:25])
tetra_test[cols] <- lapply(tetra_test[cols], factor)
colnames(tetra_test)
tetra_test <- salmonella_df %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA))) %>%
select(-c(strain, isolate, location, serovar,
serotype, resist_comb, suscept_comb,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
select(-organism_group)
cols <- c("isolation_type",
"serovar_new", "country",
"isolation_source_new",
"antigen_formula_new",
colnames(tetra_test)[12:24])
tetra_test[cols] <- lapply(tetra_test[cols], factor)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
tetra_test
View(tetra_test)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
tetra_test %>%
clean_names()
library(janitor)
tetra_test %>%
clean_names()
# clean variable names
tetra_test <- tetra_test %>%
clean_names()
rand_forest_test <- randomForest(tetracycline ~.,
data = tetra_test,
na.action = na.roughfix)
rand_forest_test
p1 <- predict(rand_forest_test, tetra_test)
confusionMatrix(p1, tetra_test$tetracycline)
library(caret)
install.packages('rlang')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(caret)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(caret)
remove.packages('rlang')
library(caret)
library(caret)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(caret)
library(ggplot2)
library(rlang)
install.packages("rlang")
library(caret)
library(ggplot2)
library(rlang)
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
updateR()
library(readr)
library(rlang)
install.packages("rlang")
library(rlang)
install.packages("dplyr")
library(readr)
library(dplyr)
rlang
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
install.packages(c("ade4", "arm", "BBmisc", "biomod2", "bnlearn", "bookdown", "broom", "bslib", "C50", "callr", "car", "classInt", "cli", "cobalt", "commonmark", "cpp11", "crayon", "crul", "Cubist", "curl", "data.table", "dbscan", "desc", "dials", "digest", "dismo", "dotCall64", "DT", "e1071", "emmeans", "evaluate", "farver", "fontawesome", "forestplot", "future", "future.apply", "gargle", "gganimate", "ggforce", "ggformula", "ggfortify", "ggplot2", "ggrepel", "ggridges", "ggsignif", "ggtext", "globals", "gridtext", "gstat", "gtable", "haven", "htmltools", "httpuv", "igraph", "isoband", "jsonlite", "labelled", "latex2exp", "lava", "lifecycle", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "Matching", "MatrixModels", "mets", "minqa", "mlr", "modeldata", "modelr", "mosaic", "mosaicCore", "mosaicData", "oai", "openssl", "parsnip", "party", "pkgload", "plotly", "plyr", "polyclip", "processx", "progressr", "ps", "purrr", "R.utils", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readr", "readxl", "recipes", "RecordLinkage", "reticulate", "rgbif", "rgdal", "riskRegression", "rmarkdown", "rstatix", "sass", "shiny", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.random", "spatstat.sparse", "spatstat.utils", "stringdist", "stringi", "styler", "sys", "terra", "testthat", "tfruns", "tibble", "tidyr", "tidyselect", "timeDate", "timereg", "tinytex", "tune", "tweenr", "V8", "vctrs", "vegan", "visNetwork", "vroom", "webshot", "wk", "workflows", "xfun", "XML", "xts", "yaml", "yardstick", "zip", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(missForest)
salmonella <- read_csv("data/salmonella_df.csv")
library(readr)
ecoli_campy <- read_csv("data/ecoli_campy_df.csv")
salmonella <- read_csv("data/salmonella_df.csv")
View(salmonella)
salmonella %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster, resist_sim,
antigen_formula, organism_group)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
streptomycin = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)))
library(tidyverse)
salmonella %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster, resist_sim,
antigen_formula, organism_group)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
streptomycin = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)))
salmonella <- salmonella %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster, resist_sim,
antigen_formula, organism_group)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
streptomycin = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)))
salmonella_tet <- salmonella %>%
select(-c(resist_comb, suscept_comb, streptomycin))
View(salmonella_tet)
salmonella <- salmonella %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster, resist_sim,
antigen_formula, organism_group)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
streptomycin = ifelse(grepl("streptomycin", suscept_comb), 1,
ifelse(grepl("streptomycin", resist_comb), 0, NA)))
ecoli_campy <- read_csv("data/ecoli_campy_df.csv")
salmonella <- read_csv("data/salmonella_df.csv")
salmonella_use <- salmonella %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster, resist_sim,
antigen_formula, organism_group)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
streptomycin = ifelse(grepl("streptomycin", suscept_comb), 1,
ifelse(grepl("streptomycin", resist_comb), 0, NA)))
View(salmonella_use)
salmonella_use <- salmonella %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster, resist_sim,
antigen_formula, organism_group)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
streptomycin = ifelse(grepl("streptomycin", suscept_comb), 1,
ifelse(grepl("streptomycin", resist_comb), 0, NA)),
sulfisoxazole = ifelse(grepl("sulfisoxazole", suscept_comb), 1,
ifelse(grepl("sulfisoxazole", resist_comb), 0, NA)),
ampicillin = ifelse(grepl("ampicillin", suscept_comb), 1,
ifelse(grepl("ampicillin", resist_comb), 0, NA))) %>%
select(-c(resist_comb, suscept_comb))
salmonella_all_antibiotics <- c("tetracycline",
"streptomycin",
"sulfisoxazole",
"ampicillin")
salmonella_all_antibiotics[!"tetracyclind"]
salmonella_all_antibiotics[!"tetracycline"]
salmonella_all_antibiotics
salmonella_all_antibiotics[-"tetracycline"]
salmonella_all_antibiotics
salmonella_all_antibiotics[-c("tetracycline")]
salmonella_all_antibiotics[!names(salmonella_all_antibiotics) %in% c("tetracycline")]
names(salmonella_all_antibiotics)
salmonella_all_antibiotics
salmonella_all_antibiotics[!salmonella_all_antibiotics %in% c("tetracycline")]
salmonella_tet <- salmonella[,!colnames(salmonella) %in%
anti_tetra]
anti_tetra <- salmonella_all_antibiotics[!salmonella_all_antibiotics %in% c("tetracycline")]
salmonella_tet <- salmonella[,!colnames(salmonella) %in%
anti_tetra]
salmonella_tet
colnames(salmonella)
salmonella_tet <- salmonella[,!colnames(salmonella_use) %in%
anti_tetra]
salmonella_tet <- salmonella_use[,!colnames(salmonella_use) %in%
anti_tetra]
anti_strep <- salmonella_all_antibiotics[!salmonella_all_antibiotics %in% c("streptomycin")]
salmonella_strep <- salmonella_use[,!colnames(salmonella_use) %in%
anti_strep]
ecoli_campy
sum(is.na(salmonella$resist_sim))
sum(is.na(salmonella$resist_sim))/nrow(salmonella)
sum(is.na(salmonella$suscept_sim))/nrow(salmonella)
sum(is.na(ecoli_campy$suscept_sim))/nrow(salmonella)
sum(is.na(ecoli_campy$resist_sim))/nrow(salmonella)
sum(is.na(salmonella$resist_sim))/nrow(salmonella)
colSums(ecoli_campy)
colSums(is.numeruc(ecoli_campy))
colSums(is.numeric(ecoli_campy))
is.numeric(ecoli_campy)
num_cols <- unlist(lapply(ecoli_campy, is.numeric))
colSums(ecoli_campy[, num_cols])
colSums(ecoli_campy[, num_cols], na.rm = T)
ecoli_campy_use <- ecoli_campy %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
meropenem = ifelse(grepl("meropenem", suscept_comb), 1,
ifelse(grepl("meropenem", resist_comb), 0, NA)),
ciprofloxacin = ifelse(grepl("ciprofloxacin", suscept_comb), 1,
ifelse(grepl("ciprofloxacin", resist_comb), 0, NA)),
ampicillin = ifelse(grepl("ampicillin", suscept_comb), 1,
ifelse(grepl("ampicillin", resist_comb), 0, NA)),
gentamicin = ifelse(grepl("gentamicin", suscept_comb), 1,
ifelse(grepl("gentamicin", resist_comb), 0, NA)),
erythromicin = ifelse(grepl("erythromicin", suscept_comb), 1,
ifelse(grepl("erythromicin", resist_comb), 0, NA)),
florfenicol = ifelse(grepl("florfenicol", suscept_comb), 1,
ifelse(grepl("florfenicol", resist_comb), 0, NA)),
azithromycin = ifelse(grepl("azithromycin", suscept_comb), 1,
ifelse(grepl("azithromycin", resist_comb), 0, NA)),
clindamycin = ifelse(grepl("clindamycin", suscept_comb), 1,
ifelse(grepl("clindamycin", resist_comb), 0, NA)),
nalidixic_acid = ifelse(grepl("nalidixic acid", suscept_comb), 1,
ifelse(grepl("nalidixic acid", resist_comb), 0, NA))) %>%
select(-c(resist_comb, suscept_comb))
num_cols <- unlist(lapply(ecoli_campy_use, is.numeric))
colSums(ecoli_campy_use[, num_cols], na.rm = T)
sort(colSums(ecoli_campy_use[, num_cols], na.rm = T), decreasing = T)
ecoli_campy_use
View(ecoli_campy_use)
ecoli_campy_use <- ecoli_campy %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster,
antigen_formula,
antigen_formula_new,
serovar_new)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
meropenem = ifelse(grepl("meropenem", suscept_comb), 1,
ifelse(grepl("meropenem", resist_comb), 0, NA)),
ciprofloxacin = ifelse(grepl("ciprofloxacin", suscept_comb), 1,
ifelse(grepl("ciprofloxacin", resist_comb), 0, NA)),
ampicillin = ifelse(grepl("ampicillin", suscept_comb), 1,
ifelse(grepl("ampicillin", resist_comb), 0, NA)),
gentamicin = ifelse(grepl("gentamicin", suscept_comb), 1,
ifelse(grepl("gentamicin", resist_comb), 0, NA)),
erythromicin = ifelse(grepl("erythromicin", suscept_comb), 1,
ifelse(grepl("erythromicin", resist_comb), 0, NA)),
florfenicol = ifelse(grepl("florfenicol", suscept_comb), 1,
ifelse(grepl("florfenicol", resist_comb), 0, NA)),
azithromycin = ifelse(grepl("azithromycin", suscept_comb), 1,
ifelse(grepl("azithromycin", resist_comb), 0, NA)),
clindamycin = ifelse(grepl("clindamycin", suscept_comb), 1,
ifelse(grepl("clindamycin", resist_comb), 0, NA)),
nalidixic_acid = ifelse(grepl("nalidixic acid", suscept_comb), 1,
ifelse(grepl("nalidixic acid", resist_comb), 0, NA))) %>%
select(-c(resist_comb, suscept_comb))
ecoli_use <- ecoli_campy_use %>%
filter(organism_group == "E.coli and Shigella")
campy_use <- ecoli_campy_use %>%
filter(organism_group == "Campylobacter jejuni")
ecoli_use <- ecoli_campy_use %>%
filter(organism_group == "E.coli and Shigella") %>%
select(-organism_group)
campy_use <- ecoli_campy_use %>%
filter(organism_group == "Campylobacter jejuni") %>%
select(-organism_group)
ecoli_campy_all_antibiotics <- c("tetracycline",
"meropenem",
"ciprofloxacin",
"ampicillin",
"gentamicin",
"erythromicin",
"florfenicol",
"azithromycin",
"clindamycin",
"nalidixic acid")
anti_tetra_ecolicamp <- ecoli_campy_all_antibiotics[!ecoli_campy_all_antibiotics %in% c("tetracycline")]
ecoli_tetra <- ecoli_use[,!colnames(ecoli_use) %in%
anti_tetra_ecolicamp]
ecoli_tetra
ecoli_campy_all_antibiotics <- c("tetracycline",
"meropenem",
"ciprofloxacin",
"ampicillin",
"gentamicin",
"erythromicin",
"florfenicol",
"azithromycin",
"clindamycin",
"nalidixic_acid")
anti_tetra_ecolicamp <- ecoli_campy_all_antibiotics[!ecoli_campy_all_antibiotics %in% c("tetracycline")]
ecoli_tetra <- ecoli_use[,!colnames(ecoli_use) %in%
anti_tetra_ecolicamp]
anti_mero_ecolicamp <- ecoli_campy_all_antibiotics[!ecoli_campy_all_antibiotics %in% c("meropenem")]
ecoli_mero <- ecoli_use[,!colnames(ecoli_use) %in%
anti_mero_ecolicamp]
ecoli_mero
View(ecoli_mero)
anti_tetra_ecolicamp
anti_gent_ecolicamp <- ecoli_campy_all_antibiotics[!ecoli_campy_all_antibiotics %in% c("gentamicin")]
campy_gent <- campy_use[,!colnames(campy_use) %in%
anti_gent_ecolicamp]
metric <- "Accuracy"
salmonella_tet
salmonella_tet
colnames(salmonella_tet)
fact_cols <- c("isolation_type", "serovar_new",
"country", "isolation_source_new",
"antigen_formula_new",
colnames(salmonella_tet)[11:23])
fact_cols
salmonella_tet[fact_cols] <- lapply(salmonella_tet[fact_cols], factor)
salmonella_tet
colnames(salmonella_strep)
fact_cols_strep <- c("isolation_type", "serovar_new",
"country", "isolation_source_new",
"antigen_formula_new",
colnames(salmonella_strep)[11:23])
salmonella_strep[fact_cols_strep] <- lapply(salmonella_strep[fact_cols_strep], factor)
colnames(ecoli_tetra)
fact_cols_tet_e <- c("isolation_type", "serovar_new",
"country", "isolation_source_new",
"antigen_formula_new",
colnames(ecoli_tetra)[10:23])
ecoli_tetra[fact_cols_tet_e] <- lapply(ecoli_tetra[fact_cols_tet_e], factor)
colnames(ecoli_tetra)
fact_cols_tet_e <- c("isolation_type",
"country", "isolation_source_new",
colnames(ecoli_tetra)[10:23])
ecoli_tetra[fact_cols_tet_e] <- lapply(ecoli_tetra[fact_cols_tet_e], factor)
fact_cols_mero <- c("isolation_type",
"country", "isolation_source_new",
colnames(ecoli_mero)[10:23])
ecoli_mero[fact_cols_mero] <- lapply(ecoli_mero[fact_cols_mero], factor)
library(missForest)
salmonella_use <- salmonella %>%
select(-c(strain, isolate, location, serovar,
serotype,
resist, suscept, isolation_source,
amr_genotypes, snp_cluster, resist_sim,
antigen_formula, organism_group)) %>%
mutate(tetracycline = ifelse(grepl("tetracycline", suscept_comb), 1,
ifelse(grepl("tetracycline", resist_comb), 0, NA)),
streptomycin = ifelse(grepl("streptomycin", suscept_comb), 1,
ifelse(grepl("streptomycin", resist_comb), 0, NA)),
sulfisoxazole = ifelse(grepl("sulfisoxazole", suscept_comb), 1,
ifelse(grepl("sulfisoxazole", resist_comb), 0, NA)),
ampicillin = ifelse(grepl("ampicillin", suscept_comb), 1,
ifelse(grepl("ampicillin", resist_comb), 0, NA))) %>%
select(-c(resist_comb, suscept_comb))
salmonella_use
colnames(salmonella_use)
salm_fct <- c("isolation_type", "serovar_new",
"country", "isolation_source_new",
"antigen_formula_new",
colnames(salmonella_use)[11:23])
salmonella_use[salm_fct] <- lapply(salmonella_use[salm_fct], factor)
salmonella_imp <- missForest(salmonella_use)
salmonella_use
salmonella_use <- as.data.frame(salmonella_use)
salmonella_use
salmonella_imp <- missForest(salmonella_use)
